#!/usr/bin/env php
<?php

use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\DependencyInjection\ContainerInterface;

echo 'Current PHP version: '.phpversion()."\n\n";

$loader = require __DIR__.'/app/autoload.php';
include_once __DIR__.'/app/bootstrap.php.cache';

$kernel = new AppKernel('prod', false);
$kernel->loadClassCache();
$kernel->boot();

// Empty location.
$application = new Application();

$container = $kernel->getContainer();

$application->add(
    new class('backup', $container) extends ContainerAwareCommand
    {
        protected $runTime;

        protected $backupDir = __DIR__.'/.bu/';

        protected $currentBackupDir;

        protected $currentCommit;

        /**
         * @var ContainerInterface $container
         */
        protected $container;

        public function __construct($name = null, $container)
        {
            parent::__construct($name);
            $this->container = $container;
        }

        protected function configure()
        {
            $this->setName('app:do_backup')->setDescription('Do a backup of the database.');
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            $this->runTime          = date('Y-m-d H:i:s');
            $this->currentCommit    = exec('git rev-parse HEAD');
            $this->currentBackupDir = $this->backupDir.$this->runTime.'_'.$this->currentCommit.'/';

            $io = new SymfonyStyle($input, $output);
            $io->title('Backup script');

            $io->section('Creating direcotry...');
            $this->createBackupDirectory();

            $io->section('Doing a database dump...');
            $this->doDatabaseDump();

            $io->section('Backing up configuration files...');
            $this->saveConfiguration();
        }

        protected function createBackupDirectory()
        {
            if (!is_dir($this->backupDir)) {
                mkdir($this->backupDir);
            }
            mkdir($this->currentBackupDir);
        }

        protected function doDatabaseDump()
        {
            // Leading space in string to prevent writing in history.
            $command = sprintf(
                ' mysqldump --user="%s" --password="%s" --host=%s --port=%s --opt "%s" > "%s" 2>/dev/null',
                $this->container->getParameter('database_user'),
                $this->container->getParameter('database_password'),
                $this->container->getParameter('database_host'),
                $this->container->getParameter('database_port'),
                $this->container->getParameter('database_name'),
                $this->currentBackupDir.'dump.sql'
            );
            exec($command);
        }

        protected function saveConfiguration()
        {
            exec(sprintf('cp "%s" "%s"', __DIR__.'/app/config/application.yml', $this->currentBackupDir));
            exec(sprintf('cp "%s" "%s"', __DIR__.'/app/config/parameters.yml', $this->currentBackupDir));
        }
    }
);

$application->setDefaultCommand('app:do_backup');
$application->run();
