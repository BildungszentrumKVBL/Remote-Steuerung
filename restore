#!/usr/bin/env php

<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Symfony\Component\Yaml\Yaml;

echo 'Current PHP version: '.phpversion()."\n\n";

require __DIR__.'/vendor/autoload.php';

$console = new Application('Restore', '0.1');

/**
 * Anonym class.
 */
$command = new class('default') extends Symfony\Component\Console\Command\Command
{
    /**
     * @var SymfonyStyle $io
     */
    private $io;

    /**
     * @var InputInterface $input
     */
    private $input;

    /**
     * @var OutputInterface $output
     */
    private $output;

    /**
     * @var string $gitVersion
     */
    private $gitVersion;

    public function configure()
    {
        $this->setName('restore');
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int|null|void
     * @throws Exception
     */
    public function execute(InputInterface $input, OutputInterface $output)
    {
        $this->io     = new SymfonyStyle($input, $output);
        $this->input  = $input;
        $this->output = $output;

        $this->gitVersion = $this->getCurrentVersion();

        $this->io->success(sprintf('Current git version is: "%s"', $this->gitVersion));

        $backups = $this->getAvailableBackups();

        $answer = $this->io->choice('Which Backup do you want to restore? (Enter the ID)', array_column($backups, 'id'));

        $backup = $backups[$answer];

        $backupDir = new SplFileInfo(__DIR__.'/.bu/'.$backup['datetime'].'_'.$backup['version']);

        $this->restoreBackup($backupDir);

        $this->io->writeln('The database and configuration has been restored.');
        $this->io->writeln(
            "The last steps are to get the new composer dependencies: \n\t`composer install --optimize-autoloader`\n".
            "clear the cache: \n\t`php app/console cache:cl -e=prod`"
        );
    }

    /**
     * Returns the current version. aka. Git HEAD
     *
     * @return string
     */
    private function getCurrentVersion()
    {
        $process = new Process('git rev-parse HEAD');
        $process->run();

        return trim($process->getOutput());
    }

    private function getAvailableBackups()
    {
        $finder = new Finder();
        $finder->in(__DIR__.'/.bu')->directories();

        $directoriesWithKey = []; // Convert to real array. Maybe there is a better solution.
        foreach ($finder as $directory) {
            $directoriesWithKey[] = $directory;
        }

        $io = $this->io; // To use in the closure.
        // Remove entries that do not seem to be a backup.
        array_walk(
            $directoriesWithKey,
            function ($value, $key) use ($io, &$directoriesWithKey) {
                /** @var SplFileInfo $value */
                try {
                    list($time, $version) = explode('_', $value->getFilename()); // Throws Exception if not explodable.
                    if (DateTime::createFromFormat('Y-m-d H:i:s', $time) === false) {
                        throw new \Exception(sprintf('"%s" is not in the right DateTime format.', $time));
                    }
                    if ($version === null) {
                        throw new \Exception('Git version could not be verified.');
                    }
                } catch (\Exception $e) {
                    $io->writeln(sprintf('"%s" does not seem to be a backup.', $value));
                    unset($directoriesWithKey[$key]);
                }
            }
        );

        $backups = [];
        foreach ($directoriesWithKey as $id => $backup) {
            /** @var SplFileInfo $backup */
            list($time, $version) = explode('_', $backup->getFilename());
            $backups[] = ['id' => $id, 'datetime' => $time, 'version' => $version];
        }

        reset($backups); // Reset keys.

        $this->io->table(
            ['ID', 'Git Version', 'Time'],
            $backups
        );

        return $backups;
    }

    private function restoreBackup(SplFileInfo $backupDir)
    {
        $fs    = new Filesystem();
        $files = ['application.yml', 'dump.sql', 'parameters.yml'];
        foreach ($files as $file) {
            if (!$fs->exists($backupDir->getRealPath().sprintf('/%s', $file))) {
                throw new \Exception(sprintf('File "%s" is missing from the backup-directory', $file));
            }
        }

        list(, $gitVersion) = explode('_', $backupDir->getFilename());

        if ($gitVersion !== $this->gitVersion) {
            $this->io->note('Keep in mind, when reverting to a earlier codebase, the backup- and restore-script change aswell.');
            if ($this->io->confirm(sprintf('Do you want to apply the code-base from git version "%s"?', $gitVersion))) {
                $this->io->note('You can always go to the newest version by using: `git checkout master -f`');
                $process = new Process(sprintf('git checkout %s -f', $gitVersion));
                $process->run();
                if ($process->isSuccessful()) {
                    $this->io->success(sprintf('Changed commit to "%s"', $gitVersion));
                } else {
                    throw new \Exception("Something went wrong! Please contact us over Github so we can fix this together.");
                }
            }
        }

        if ($this->io->confirm('Do you want to restore the application specific configurations?')) {
            $fs->copy($backupDir->getRealPath().'/application.yml', __DIR__.'/app/config/application.yml', true);
            $this->io->success('Restored application.yml');
        }

        if ($this->io->confirm('Do you want to restore the database and websocket configurations?')) {
            $fs->copy($backupDir->getRealPath().'/parameters.yml', __DIR__.'/app/config/parameters.yml', true);
            $this->io->success('Restored parameters.yml');
        }

        if ($this->io->confirm('Do you want to restore the whole database?')) {
            $parameters = Yaml::parse(file_get_contents(__DIR__.'/app/config/parameters.yml'))['parameters'];
            if ($this->io->confirm('Do you want to display the database connection settings from the parameters.yml?')) {
                var_dump($parameters);
                if (!$this->io->confirm('Do you want to continue?')) {
                    $this->io->note('Database restore has been canceled.');
                }
            }
            // Leading space in string to prevent writing in history.
            $command                = sprintf(
                ' mysql --user="%s" --password="%s" --host=%s --port=%s "%s" < "%s"',
                $parameters['database_user'], $parameters['database_password'],
                $parameters['database_host'], $parameters['database_port'],
                $parameters['database_name'], $backupDir->getRealPath().'/dump.sql'
            );
            $databaseRestoreProcess = new Process($command);
            $databaseRestoreProcess->run();
            if (!$databaseRestoreProcess->isSuccessful()) {
                $this->io->error(sprintf('Database restore was not successfull. Output %s', $databaseRestoreProcess->getOutput()));
                exit;
            }
        }
    }
};


$console->add($command);
$console->setDefaultCommand($command->getName());

$console->run();
